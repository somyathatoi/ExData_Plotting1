old.dir<-getwd()
dir.create() testdir
?dir.create
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R" , "mytest2.R")
file.copy("mytest2.R" , "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R" "folder1")
file.path("mytest3.R", "folder1")
file.path("folder1", "folder2")
?dir.create()
dir.create(recursive = TRUE)
dir.create("testdir" recursive = TRUE)
dir.create("testdir" ,recursive = TRUE)
dir.create("testdir1" , recursive = TRUE)
dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = "0777")
dir.create("testdir", showWarnings = TRUE, recursive = TRUE, mode = "0777")
dir.create("testdir2", showWarnings = TRUE, recursive = TRUE, mode = "0777")
dir.create("testdir2", showWarnings = TRUE, recursive = TRUE, mode = "0777")
dir.create("testdir3", showWarnings = TRUE, recursive = TRUE, mode = "0777")
INFO()
info()
main()
?dir.create()
?dir.create
getwd()
ls
ls()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("old.dir")
setwd("old.dir)
setwd(old.dir)
ls()
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"somya")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!" ,sep=" ")
paste(c(1:3),c("x","y","z"),sep=" ")
paste(1:3,c("x","y","z"),sep=" ")
paste(1:3,c("x","y","z"),sep="")
paste(1:3, c("x", "y", "z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x<-c(x[2],x[4],x[6])
x<-[c(x(2),x(4),x(6)]
x<-[c(x(2),x(4),x(6))]
x[c(x(2),x(4),x(6))]
x[c(2,4,6)]
y<-x[c(2,4,6)]
x<-x[c(2,4,6)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=10,bar=2,norf=NA)
vect <-c (foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix<-matrix(1:20,nrow=4,ncol=5)
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames,my_data)
colnames(my_data)
colnames(my_data)<-cnames
my_data
utils::arrangeWindows(action='cascade')
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
idetical('twins','twins')
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
mean
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(median , c(1.4,3.6,7.9,8.8))
evaluate(sd , c(1.4,3.6,7.9,8.8))
evaluate(function(x) {x+1}, 6)
evaluate(function(x) {c(1)}, c(8,4,0))
evaluate(function(x) {[c(1)]}, c(8,4,0))
evaluate(function(x) {x[c(1)]}, c(8,4,0))
evaluate(function(x) {x[c(3)]}, c(8,4,0))
evaluate(function(x) {x[length(x)]}, c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Great","work")
submit()
submit()
mad_libs(mumbai ,is,dog)
mad_libs("mumbai" ,"is","dog")
submit()
submit()
submit()
submit()
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list<- sapply(flags,class)
cls_vector<- sapply(flags,class)
cls_vect<- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[, 11;17]
flag_colors<-flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<- flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok
ok()
sapply(flags,class)
vapply(flags,class,character(1)0
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$green,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
sample(LETTERS,10)
LETTERS
sample(LETTERS)
sample(c(0,1) ,100,replace=TRUE,prob=c(0.3,0.7)
)
flips<-sample(c(0,1) ,100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(c(0,1),size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
?rpois
rpois(5,10)
my_pois(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-Date("1969-01-01")
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1<weekdays()
d1<-weekdays()
d1<-weekdays(Sys.Date())
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed",ylab = "Stopping Distance")
My Plot<-
My Plot<-plot(cars)
plot(x = cars$speed, y = cars$dist, xlab="Speed",ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl , data = mtcars)
hist(mtcars$mpg)
1
Exit
q()
# set your working directory (change according to your need)
setwd('C:/Users/Compaq/Desktop/Courseera/datasciencecoursera/ExData_Plotting1')
# required packages
library(data.table)
library(lubridate)
# Check whether input directory exist or not. If not , then create one
if (!file.exists('DataSet')) {
dir.create('DataSet')
}
# check whether the input file exist or not; if not, make it...
if (!file.exists('DataSet/household_power_consumption_2days.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='DataSet/household_power_consumption.zip')
unzip('DataSet/household_power_consumption.zip',exdir='DataSet',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
household.power.consumption<-read.table('DataSet/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
household.power.consumption<-household.power.consumption[household.power.consumption$Date=='1/2/2007' | household.power.consumption$Date=='2/2/2007',]
dir.create('DataSet')
}
# check whether the input file exist or not; if not, make it...
if (!file.exists('DataSet/household_power_consumption_2days.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='DataSet/household_power_consumption.zip')
unzip('DataSet/household_power_consumption.zip',exdir='DataSet',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
household.power.consumption<-read.table('DataSet/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
household.power.consumption<-household.power.consumption[household.power.consumption$Date=='1/2/2007' | household.power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(household.power.consumption)<-cols
household.power.consumption$DateTime<-dmy(household.power.consumption$Date)+hms(household.power.consumption$Time)
household.power.consumption<-household.power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(household.power.consumption,file='DataSet/household_power_consumption_2days.txt',sep='|',row.names=FALSE)
} else {
household.power.consumption<-read.table('DataSet/household_power_consumption_2days.txt',header=TRUE,sep='|')
household.power.consumption$DateTime<-as.POSIXlt(household.power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('DataSet/household_power_consumption.txt')) {
x<-file.remove('DataSet/household_power_consumption.txt')
}
# set your working directory (change according to your need)
setwd('C:/Users/Compaq/Desktop/Courseera/datasciencecoursera/ExData_Plotting1')
# required packages
library(data.table)
library(lubridate)
# Check whether input directory exist or not. If not , then create one
if (!file.exists('DataSet')) {
dir.create('DataSet')
}
# check whether the input file exist or not; if not, make it...
if (!file.exists('DataSet/household_power_consumption_2days.txt')) {
# download the zip file and unzip
file.url<-'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(file.url,destfile='DataSet/household_power_consumption.zip')
unzip('DataSet/household_power_consumption.zip',exdir='DataSet',overwrite=TRUE)
# read the raw table and limit to 2 days
variable.class<-c(rep('character',2),rep('numeric',7))
household.power.consumption<-read.table('DataSet/household_power_consumption.txt',header=TRUE,
sep=';',na.strings='?',colClasses=variable.class)
household.power.consumption<-household.power.consumption[household.power.consumption$Date=='1/2/2007' | household.power.consumption$Date=='2/2/2007',]
# clean up the variable names and convert date/time fields
cols<-c('Date','Time','GlobalActivePower','GlobalReactivePower','Voltage','GlobalIntensity',
'SubMetering1','SubMetering2','SubMetering3')
colnames(household.power.consumption)<-cols
household.power.consumption$DateTime<-dmy(household.power.consumption$Date)+hms(household.power.consumption$Time)
household.power.consumption<-household.power.consumption[,c(10,3:9)]
# write a clean data set to the directory
write.table(household.power.consumption,file='DataSet/household_power_consumption_2days.txt',sep='|',row.names=FALSE)
} else {
household.power.consumption<-read.table('DataSet/household_power_consumption_2days.txt',header=TRUE,sep='|')
household.power.consumption$DateTime<-as.POSIXlt(household.power.consumption$DateTime)
}
# remove the large raw data set
if (file.exists('DataSet/household_power_consumption.txt')) {
x<-file.remove('DataSet/household_power_consumption.txt')
}
# set your working directory (change according to your need)
setwd('C:/Users/Compaq/Desktop/Courseera/datasciencecoursera/ExData_Plotting1')
#  Check whether plots directory exist or not. If not , then create one
if (!file.exists('plots')) {
dir.create('plots')
}
# load the cleansed data
source('codes/Getting_And_Cleaning_Data.R')
# open the device
png(filename='plots/plot1.png',width=480,height=480,units='px')
# plot data
hist(household.power.consumption$GlobalActivePower,main='Global Active Power',xlab='Global Active Power (kilowatts)',col='red')
# Turn off device
x<-dev.off()
# set your working directory (change according to your need)
setwd('C:/Users/Compaq/Desktop/Courseera/datasciencecoursera/ExData_Plotting1')
#  Check whether plots directory exist or not. If not , then create one
if (!file.exists('plots')) {
dir.create('plots')
}
# load the cleansed data
source('codes/Getting_And_Cleaning_Data.R')
# open device
png(filename='plots/plot2.png',width=480,height=480,units='px')
# plot data
plot(household.power.consumption$DateTime,household.power.consumption$GlobalActivePower,ylab='Global Active Power (kilowatts)', xlab='', type='l')
# Turn off device
x<-dev.off()
# set your working directory (change according to your need)
setwd('C:/Users/Compaq/Desktop/Courseera/datasciencecoursera/ExData_Plotting1')
#  Check whether plots directory exist or not. If not , then create one
if (!file.exists('plots')) {
dir.create('plots')
}
# load the cleansed data
source('codes/Getting_And_Cleaning_Data.R')
# open device
png(filename='plots/plot3.png',width=480,height=480,units='px')
# plot data
lncol<-c('black','red','blue')
lbls<-c('Sub_metering_1','Sub_metering_2','Sub_metering_3')
plot(household.power.consumption$DateTime,household.power.consumption$SubMetering1,type='l',col=lncol[1],xlab='',ylab='Energy sub metering')
lines(household.power.consumption$DateTime,household.power.consumption$SubMetering2,col=lncol[2])
lines(household.power.consumption$DateTime,household.power.consumption$SubMetering3,col=lncol[3])
# add legend
legend('topright',legend=lbls,col=lncol,lty='solid')
# Turn off device
x<-dev.off()
# set your working directory (change according to your need)
setwd('C:/Users/Compaq/Desktop/Courseera/datasciencecoursera/ExData_Plotting1')
#  Check whether plots directory exist or not. If not , then create one
if (!file.exists('plots')) {
dir.create('plots')
}
# load the cleansed data
source('codes/Getting_And_Cleaning_Data.R')
# open device
png(filename='plots/plot4.png',width=480,height=480,units='px')
# make 4 plots
par(mfrow=c(2,2))
# plot data on top left (1,1)
plot(household.power.consumption$DateTime,household.power.consumption$GlobalActivePower,ylab='Global Active Power',xlab='',type='l')
# plot data on top right (1,2)
plot(household.power.consumption$DateTime,household.power.consumption$Voltage,xlab='datetime',ylab='Voltage',type='l')
# plot data on bottom left (2,1)
lncol<-c('black','red','blue')
lbls<-c('Sub_metering_1','Sub_metering_2','Sub_metering_3')
plot(household.power.consumption$DateTime,household.power.consumption$SubMetering1,type='l',col=lncol[1],xlab='',ylab='Energy sub metering')
lines(household.power.consumption$DateTime,household.power.consumption$SubMetering2,col=lncol[2])
lines(household.power.consumption$DateTime,household.power.consumption$SubMetering3,col=lncol[3])
# plot data on bottom right (2,2)
plot(household.power.consumption$DateTime,household.power.consumption$GlobalReactivePower,xlab='datetime',ylab='Global_reactive_power',type='l')
# Turn off device
x<-dev.off()
